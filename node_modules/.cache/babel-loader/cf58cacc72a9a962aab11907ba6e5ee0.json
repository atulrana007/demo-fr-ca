{"ast":null,"code":"import Rules from\"./Rules\";export var DisplayRules=function DisplayRules(passwordRules,PasswordPolicyState){var _passwordRules$passwo;var displayablerule=[];var getKeys=[];var ruleMap=passwordRules&&Rules({count:passwordRules===null||passwordRules===void 0?void 0:(_passwordRules$passwo=passwordRules.password_complexity_options)===null||_passwordRules$passwo===void 0?void 0:_passwordRules$passwo.min_length});if((passwordRules===null||passwordRules===void 0?void 0:passwordRules.passwordPolicy)===\"excellent\"){for(var _i=0,_Object$keys=Object.keys(PasswordPolicyState);_i<_Object$keys.length;_i++){var key=_Object$keys[_i];getKeys.push(key);displayablerule.push(ruleMap[key]);}}else if((passwordRules===null||passwordRules===void 0?void 0:passwordRules.passwordPolicy)===\"good\"){for(var _i2=0,_Object$keys2=Object.keys(PasswordPolicyState);_i2<_Object$keys2.length;_i2++){var _key=_Object$keys2[_i2];if(_key===\"Non_empty_Password_Required\"||_key===\"Lower_case_Upper_Case_Numbers\"||_key===\"Length_Check\"||_key===\"Special_characters\"){getKeys.push(_key);displayablerule.push(ruleMap[_key]);}}}else if((passwordRules===null||passwordRules===void 0?void 0:passwordRules.passwordPolicy)===\"fair\"){for(var _i3=0,_Object$keys3=Object.keys(PasswordPolicyState);_i3<_Object$keys3.length;_i3++){var _key2=_Object$keys3[_i3];if(_key2===\"Non_empty_Password_Required\"||_key2===\"Lower_case_Upper_Case_Numbers\"||_key2===\"Length_Check\"){getKeys.push(_key2);displayablerule.push(ruleMap[_key2]);}}}else if((passwordRules===null||passwordRules===void 0?void 0:passwordRules.passwordPolicy)===\"low\"){for(var _i4=0,_Object$keys4=Object.keys(PasswordPolicyState);_i4<_Object$keys4.length;_i4++){var _key3=_Object$keys4[_i4];if(_key3===\"Non_empty_Password_Required\"||_key3===\"Length_Check\"){getKeys.push(_key3);displayablerule.push(ruleMap[_key3]);}}}else if((passwordRules===null||passwordRules===void 0?void 0:passwordRules.passwordPolicy)===null){for(var _i5=0,_Object$keys5=Object.keys(PasswordPolicyState);_i5<_Object$keys5.length;_i5++){var _key4=_Object$keys5[_i5];if(_key4===\"Non_empty_Password_Required\"){getKeys.push(_key4);displayablerule.push(ruleMap[_key4]);}}}return{getKeys:getKeys,displayablerule:displayablerule};};","map":{"version":3,"sources":["/home/raramuri/Videos/mcafee/language-test/src/utils/displayRules.js"],"names":["Rules","DisplayRules","passwordRules","PasswordPolicyState","displayablerule","getKeys","ruleMap","count","password_complexity_options","min_length","passwordPolicy","Object","keys","key","push"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,aAAD,CAAgBC,mBAAhB,CAAwC,2BAClE,GAAMC,CAAAA,eAAe,CAAG,EAAxB,CACA,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAMC,CAAAA,OAAO,CACXJ,aAAa,EACbF,KAAK,CAAC,CACJO,KAAK,CAAEL,aAAF,SAAEA,aAAF,wCAAEA,aAAa,CAAEM,2BAAjB,gDAAE,sBAA4CC,UAD/C,CAAD,CAFP,CAKA,GAAI,CAAAP,aAAa,OAAb,EAAAA,aAAa,SAAb,QAAAA,aAAa,CAAEQ,cAAf,IAAkC,WAAtC,CAAmD,CACjD,0BAAkBC,MAAM,CAACC,IAAP,CAAYT,mBAAZ,CAAlB,6BAAoD,CAA/C,GAAMU,CAAAA,GAAG,iBAAT,CACHR,OAAO,CAACS,IAAR,CAAaD,GAAb,EACAT,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACO,GAAD,CAA5B,EACD,CACF,CALD,IAKO,IAAI,CAAAX,aAAa,OAAb,EAAAA,aAAa,SAAb,QAAAA,aAAa,CAAEQ,cAAf,IAAkC,MAAtC,CAA8C,CACnD,4BAAkBC,MAAM,CAACC,IAAP,CAAYT,mBAAZ,CAAlB,gCAAoD,CAA/C,GAAMU,CAAAA,IAAG,mBAAT,CACH,GACEA,IAAG,GAAK,6BAAR,EACAA,IAAG,GAAK,+BADR,EAEAA,IAAG,GAAK,cAFR,EAGAA,IAAG,GAAK,oBAJV,CAKE,CACAR,OAAO,CAACS,IAAR,CAAaD,IAAb,EACAT,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACO,IAAD,CAA5B,EACD,CACF,CACF,CAZM,IAYA,IAAI,CAAAX,aAAa,OAAb,EAAAA,aAAa,SAAb,QAAAA,aAAa,CAAEQ,cAAf,IAAkC,MAAtC,CAA8C,CACnD,4BAAkBC,MAAM,CAACC,IAAP,CAAYT,mBAAZ,CAAlB,gCAAoD,CAA/C,GAAMU,CAAAA,KAAG,mBAAT,CACH,GACEA,KAAG,GAAK,6BAAR,EACAA,KAAG,GAAK,+BADR,EAEAA,KAAG,GAAK,cAHV,CAIE,CACAR,OAAO,CAACS,IAAR,CAAaD,KAAb,EACAT,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACO,KAAD,CAA5B,EACD,CACF,CACF,CAXM,IAWA,IAAI,CAAAX,aAAa,OAAb,EAAAA,aAAa,SAAb,QAAAA,aAAa,CAAEQ,cAAf,IAAkC,KAAtC,CAA6C,CAClD,4BAAkBC,MAAM,CAACC,IAAP,CAAYT,mBAAZ,CAAlB,gCAAoD,CAA/C,GAAMU,CAAAA,KAAG,mBAAT,CACH,GAAIA,KAAG,GAAK,6BAAR,EAAyCA,KAAG,GAAK,cAArD,CAAqE,CACnER,OAAO,CAACS,IAAR,CAAaD,KAAb,EACAT,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACO,KAAD,CAA5B,EACD,CACF,CACF,CAPM,IAOA,IAAI,CAAAX,aAAa,OAAb,EAAAA,aAAa,SAAb,QAAAA,aAAa,CAAEQ,cAAf,IAAkC,IAAtC,CAA4C,CACjD,4BAAkBC,MAAM,CAACC,IAAP,CAAYT,mBAAZ,CAAlB,gCAAoD,CAA/C,GAAMU,CAAAA,KAAG,mBAAT,CACH,GAAIA,KAAG,GAAK,6BAAZ,CAA2C,CACzCR,OAAO,CAACS,IAAR,CAAaD,KAAb,EACAT,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACO,KAAD,CAA5B,EACD,CACF,CACF,CACD,MAAO,CAAER,OAAO,CAAPA,OAAF,CAAWD,eAAe,CAAfA,eAAX,CAAP,CACD,CApDM","sourcesContent":["import Rules from \"./Rules\";\nexport const DisplayRules = (passwordRules, PasswordPolicyState) => {\n  const displayablerule = [];\n  const getKeys = [];\n  const ruleMap =\n    passwordRules &&\n    Rules({\n      count: passwordRules?.password_complexity_options?.min_length,\n    });\n  if (passwordRules?.passwordPolicy === \"excellent\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      getKeys.push(key);\n      displayablerule.push(ruleMap[key]);\n    }\n  } else if (passwordRules?.passwordPolicy === \"good\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (\n        key === \"Non_empty_Password_Required\" ||\n        key === \"Lower_case_Upper_Case_Numbers\" ||\n        key === \"Length_Check\" ||\n        key === \"Special_characters\"\n      ) {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if (passwordRules?.passwordPolicy === \"fair\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (\n        key === \"Non_empty_Password_Required\" ||\n        key === \"Lower_case_Upper_Case_Numbers\" ||\n        key === \"Length_Check\"\n      ) {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if (passwordRules?.passwordPolicy === \"low\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\" || key === \"Length_Check\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if (passwordRules?.passwordPolicy === null) {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  }\n  return { getKeys, displayablerule };\n};\n"]},"metadata":{},"sourceType":"module"}