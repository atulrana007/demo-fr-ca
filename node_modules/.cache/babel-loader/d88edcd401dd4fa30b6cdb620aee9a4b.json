{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useContext, useState, useCallback } from \"react\";\nimport { debounce } from \"lodash\";\nimport { AccountContext } from \"../providers/AccountContext\";\nimport { CommonDataContext } from \"../providers/CommonDataContext\";\nimport { validatePassword } from \"../validator/PasswordValidator\";\nexport default function SignupContainer(props) {\n  _s();\n\n  const {\n    SignupWithPassword,\n    loginWithPassword\n  } = useContext(AccountContext);\n  const {\n    connections\n  } = useContext(CommonDataContext);\n  const [loader, setLoader] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n  const [passwordRules, setPasswordRules] = useState(null);\n  const [SignupForm, setSignupForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    isSubmitting: false\n  });\n  const [PasswordPolicyState, setPasswordPolicyState] = useState({\n    No_more_than_2_identical_characters_in_a_row: false,\n    Special_characters: false,\n    Lower_case_Upper_Case_Numbers: false,\n    Length_Check: false,\n    Non_empty_Password_Required: false\n  });\n  const [SignupError, setSignupError] = useState({\n    email: \"\",\n    isEmailError: \"\",\n    databaseError: \"\",\n    errorCode: \"\"\n  });\n  const debounceSubmit = useCallback(debounce(() => {\n    setSignupForm({ ...SignupForm,\n      isSubmitting: false\n    });\n    setIsValid(false);\n  }, 2000), []);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    setSignupForm({ ...SignupForm,\n      isSubmitting: true\n    });\n    setLoader(true);\n\n    try {\n      const res = await SignupWithPassword(SignupForm.email, SignupForm.password);\n\n      if (res.email) {\n        await loginWithPassword(SignupForm.email, SignupForm.password);\n      }\n    } catch (e) {\n      setSignupError({ ...SignupError,\n        databaseError: e.description,\n        errorCode: e.code\n      });\n    }\n\n    setLoader(false);\n    debounceSubmit();\n  };\n\n  const onClick = e => {\n    setPasswordRules(connections[0]);\n  };\n\n  const onChange = e => {\n    if (e.target.name === \"password\" && passwordRules) {\n      validatePassword(passwordRules, e.target.value, PasswordPolicyState, setPasswordPolicyState, setIsValid);\n    }\n\n    setSignupForm({ ...SignupForm,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const child = React.Children.only(props.children);\n  return /*#__PURE__*/React.cloneElement(child, {\n    onSubmit,\n    SignupForm,\n    onChange,\n    onClick,\n    passwordRules,\n    PasswordPolicyState,\n    isValid,\n    SignupError,\n    loader\n  });\n}\n\n_s(SignupContainer, \"pNjhaP2/2ITKA8CfWyGEyJLBbok=\");\n\n_c = SignupContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupContainer\");","map":{"version":3,"sources":["/home/raramuri/Videos/McAfee-auth-Official/McAfee-odrplat-auth0-ui/src/containers/signupContainer.jsx"],"names":["React","useContext","useState","useCallback","debounce","AccountContext","CommonDataContext","validatePassword","SignupContainer","props","SignupWithPassword","loginWithPassword","connections","loader","setLoader","isValid","setIsValid","passwordRules","setPasswordRules","SignupForm","setSignupForm","email","password","confirmPassword","isSubmitting","PasswordPolicyState","setPasswordPolicyState","No_more_than_2_identical_characters_in_a_row","Special_characters","Lower_case_Upper_Case_Numbers","Length_Check","Non_empty_Password_Required","SignupError","setSignupError","isEmailError","databaseError","errorCode","debounceSubmit","onSubmit","e","preventDefault","res","description","code","onClick","onChange","target","name","value","child","Children","only","children","cloneElement"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useCallback } from \"react\";\nimport { debounce } from \"lodash\";\nimport { AccountContext } from \"../providers/AccountContext\";\nimport { CommonDataContext } from \"../providers/CommonDataContext\";\nimport { validatePassword } from \"../validator/PasswordValidator\";\n\nexport default function SignupContainer(props) {\n  const { SignupWithPassword, loginWithPassword } = useContext(AccountContext);\n  const { connections } = useContext(CommonDataContext);\n  const [loader, setLoader] = useState(false);\n\n  const [isValid, setIsValid] = useState(false);\n  const [passwordRules, setPasswordRules] = useState(null);\n  const [SignupForm, setSignupForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    isSubmitting: false,\n  });\n  const [PasswordPolicyState, setPasswordPolicyState] = useState({\n    No_more_than_2_identical_characters_in_a_row: false,\n    Special_characters: false,\n    Lower_case_Upper_Case_Numbers: false,\n    Length_Check: false,\n    Non_empty_Password_Required: false,\n  });\n  const [SignupError, setSignupError] = useState({\n    email: \"\",\n    isEmailError: \"\",\n    databaseError: \"\",\n    errorCode: \"\",\n  });\n\n  const debounceSubmit = useCallback(\n    debounce(() => {\n      setSignupForm({\n        ...SignupForm,\n        isSubmitting: false,\n      });\n      setIsValid(false);\n    }, 2000),\n    []\n  );\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setSignupForm({\n      ...SignupForm,\n      isSubmitting: true,\n    });\n    setLoader(true);\n    try {\n      const res = await SignupWithPassword(\n        SignupForm.email,\n        SignupForm.password\n      );\n      if (res.email) {\n        await loginWithPassword(SignupForm.email, SignupForm.password);\n      }\n    } catch (e) {\n      setSignupError({\n        ...SignupError,\n        databaseError: e.description,\n        errorCode: e.code,\n      });\n    }\n    setLoader(false);\n    debounceSubmit();\n  };\n\n  const onClick = (e) => {\n    setPasswordRules(connections[0]);\n  };\n  const onChange = (e) => {\n    if (e.target.name === \"password\" && passwordRules) {\n      validatePassword(\n        passwordRules,\n        e.target.value,\n        PasswordPolicyState,\n        setPasswordPolicyState,\n        setIsValid\n      );\n    }\n    setSignupForm({\n      ...SignupForm,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const child = React.Children.only(props.children);\n  return React.cloneElement(child, {\n    onSubmit,\n    SignupForm,\n    onChange,\n    onClick,\n    passwordRules,\n    PasswordPolicyState,\n    isValid,\n    SignupError,\n    loader,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}