{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { AccountContext } from \"../providers/AccountContext\";\nimport { CommonDataContext } from \"../providers/CommonDataContext\";\nimport { validatePassword } from \"../validator/PasswordValidator\";\nexport default function SignupContainer(props) {\n  _s();\n\n  const {\n    SignupWithPassword,\n    loginWithPassword\n  } = useContext(AccountContext);\n  const {\n    connections\n  } = useContext(CommonDataContext);\n  const [isValid, setIsValid] = useState(false);\n  const [passwordRules, setPasswordRules] = useState(null);\n  const [SignupForm, setSignupForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    isSubmitting: false\n  });\n  const [PasswordPolicyState, setPasswordPolicyState] = useState({\n    No_more_than_2_identical_characters_in_a_row: false,\n    Special_characters: false,\n    Lower_case_Upper_Case_Numbers: false,\n    Length_Check: false,\n    Non_empty_Password_Required: false\n  });\n  const [SignupError, setSignupError] = useState({\n    email: \"\",\n    isEmailError: \"\",\n    databaseError: \"\",\n    errorCode: \"\"\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (SignupForm.email !== \"\" && SignupForm.password !== \"\" && SignupForm.confirmPassword !== \"\" && SignupForm.password === SignupForm.confirmPassword) {\n      try {\n        const res = await SignupWithPassword(SignupForm.email, SignupForm.password);\n\n        if (res.email) {\n          await loginWithPassword(SignupForm.email, SignupForm.password);\n        }\n      } catch (e) {\n        setSignupError({ ...SignupError,\n          databaseError: e.description,\n          errorCode: e.code\n        });\n      }\n    } else {\n      console.log(\"enter details\");\n    }\n  };\n\n  const onClick = e => {\n    setPasswordRules(connections[0]);\n  };\n\n  const onChange = e => {\n    if (e.target.name === \"password\" && passwordRules) {\n      validatePassword(passwordRules, e.target.value, PasswordPolicyState, setPasswordPolicyState, setIsValid);\n    }\n\n    setSignupForm({ ...SignupForm,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const child = React.Children.only(props.children);\n  return /*#__PURE__*/React.cloneElement(child, {\n    onSubmit,\n    SignupForm,\n    onChange,\n    onClick,\n    passwordRules,\n    PasswordPolicyState,\n    isValid,\n    SignupError\n  });\n}\n\n_s(SignupContainer, \"w8mE9TZTCwBvve+SE204kdCH4ow=\");\n\n_c = SignupContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupContainer\");","map":{"version":3,"sources":["/home/raramuri/Videos/McAfee-auth-Official/McAfee-odrplat-auth0-ui/src/containers/signupContainer.jsx"],"names":["React","useContext","useState","AccountContext","CommonDataContext","validatePassword","SignupContainer","props","SignupWithPassword","loginWithPassword","connections","isValid","setIsValid","passwordRules","setPasswordRules","SignupForm","setSignupForm","email","password","confirmPassword","isSubmitting","PasswordPolicyState","setPasswordPolicyState","No_more_than_2_identical_characters_in_a_row","Special_characters","Lower_case_Upper_Case_Numbers","Length_Check","Non_empty_Password_Required","SignupError","setSignupError","isEmailError","databaseError","errorCode","onSubmit","e","preventDefault","res","description","code","console","log","onClick","onChange","target","name","value","child","Children","only","children","cloneElement"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { AccountContext } from \"../providers/AccountContext\";\nimport { CommonDataContext } from \"../providers/CommonDataContext\";\nimport { validatePassword } from \"../validator/PasswordValidator\";\n\nexport default function SignupContainer(props) {\n  const { SignupWithPassword, loginWithPassword } = useContext(AccountContext);\n  const { connections } = useContext(CommonDataContext);\n\n  const [isValid, setIsValid] = useState(false);\n  const [passwordRules, setPasswordRules] = useState(null);\n  const [SignupForm, setSignupForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    isSubmitting: false,\n  });\n  const [PasswordPolicyState, setPasswordPolicyState] = useState({\n    No_more_than_2_identical_characters_in_a_row: false,\n    Special_characters: false,\n    Lower_case_Upper_Case_Numbers: false,\n    Length_Check: false,\n    Non_empty_Password_Required: false,\n  });\n  const [SignupError, setSignupError] = useState({\n    email: \"\",\n    isEmailError: \"\",\n    databaseError: \"\",\n    errorCode: \"\",\n  });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (\n      SignupForm.email !== \"\" &&\n      SignupForm.password !== \"\" &&\n      SignupForm.confirmPassword !== \"\" &&\n      SignupForm.password === SignupForm.confirmPassword\n    ) {\n      try {\n        const res = await SignupWithPassword(\n          SignupForm.email,\n          SignupForm.password\n        );\n        if (res.email) {\n          await loginWithPassword(SignupForm.email, SignupForm.password);\n        }\n      } catch (e) {\n        setSignupError({\n          ...SignupError,\n          databaseError: e.description,\n          errorCode: e.code,\n        });\n      }\n    } else {\n      console.log(\"enter details\");\n    }\n  };\n\n  const onClick = (e) => {\n    setPasswordRules(connections[0]);\n  };\n  const onChange = (e) => {\n    if (e.target.name === \"password\" && passwordRules) {\n      validatePassword(\n        passwordRules,\n        e.target.value,\n        PasswordPolicyState,\n        setPasswordPolicyState,\n        setIsValid\n      );\n    }\n    setSignupForm({\n      ...SignupForm,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const child = React.Children.only(props.children);\n  return React.cloneElement(child, {\n    onSubmit,\n    SignupForm,\n    onChange,\n    onClick,\n    passwordRules,\n    PasswordPolicyState,\n    isValid,\n    SignupError,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}