{"ast":null,"code":"import Rules from \"./Rules\";\nexport const DisplayRules = (passwordRules, PasswordPolicyState) => {\n  var _passwordRules$passwo;\n\n  const displayablerule = [];\n  const getKeys = [];\n  const ruleMap = passwordRules && Rules({\n    count: passwordRules === null || passwordRules === void 0 ? void 0 : (_passwordRules$passwo = passwordRules.password_complexity_options) === null || _passwordRules$passwo === void 0 ? void 0 : _passwordRules$passwo.min_length\n  });\n\n  if ((passwordRules === null || passwordRules === void 0 ? void 0 : passwordRules.passwordPolicy) === \"excellent\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      getKeys.push(key);\n      displayablerule.push(ruleMap[key]);\n    }\n  } else if ((passwordRules === null || passwordRules === void 0 ? void 0 : passwordRules.passwordPolicy) === \"good\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\" || key === \"Lower_case_Upper_Case_Numbers\" || key === \"Length_Check\" || key === \"Special_characters\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if ((passwordRules === null || passwordRules === void 0 ? void 0 : passwordRules.passwordPolicy) === \"fair\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\" || key === \"Lower_case_Upper_Case_Numbers\" || key === \"Length_Check\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if ((passwordRules === null || passwordRules === void 0 ? void 0 : passwordRules.passwordPolicy) === \"low\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\" || key === \"Length_Check\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if ((passwordRules === null || passwordRules === void 0 ? void 0 : passwordRules.passwordPolicy) === null) {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  }\n\n  return {\n    getKeys,\n    displayablerule\n  };\n};\n_c = DisplayRules;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayRules\");","map":{"version":3,"sources":["/home/raramuri/Videos/mcafee/language-test/src/utils/displayRules.js"],"names":["Rules","DisplayRules","passwordRules","PasswordPolicyState","displayablerule","getKeys","ruleMap","count","password_complexity_options","min_length","passwordPolicy","key","Object","keys","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAAA;;AAClE,QAAMC,eAAe,GAAG,EAAxB;AACA,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,OAAO,GACXJ,aAAa,IACbF,KAAK,CAAC;AACJO,IAAAA,KAAK,EAAEL,aAAF,aAAEA,aAAF,gDAAEA,aAAa,CAAEM,2BAAjB,0DAAE,sBAA4CC;AAD/C,GAAD,CAFP;;AAKA,MAAI,CAAAP,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,cAAf,MAAkC,WAAtC,EAAmD;AACjD,SAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYV,mBAAZ,CAAlB,EAAoD;AAClDE,MAAAA,OAAO,CAACS,IAAR,CAAaH,GAAb;AACAP,MAAAA,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACK,GAAD,CAA5B;AACD;AACF,GALD,MAKO,IAAI,CAAAT,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,cAAf,MAAkC,MAAtC,EAA8C;AACnD,SAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYV,mBAAZ,CAAlB,EAAoD;AAClD,UACEQ,GAAG,KAAK,6BAAR,IACAA,GAAG,KAAK,+BADR,IAEAA,GAAG,KAAK,cAFR,IAGAA,GAAG,KAAK,oBAJV,EAKE;AACAN,QAAAA,OAAO,CAACS,IAAR,CAAaH,GAAb;AACAP,QAAAA,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACK,GAAD,CAA5B;AACD;AACF;AACF,GAZM,MAYA,IAAI,CAAAT,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,cAAf,MAAkC,MAAtC,EAA8C;AACnD,SAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYV,mBAAZ,CAAlB,EAAoD;AAClD,UACEQ,GAAG,KAAK,6BAAR,IACAA,GAAG,KAAK,+BADR,IAEAA,GAAG,KAAK,cAHV,EAIE;AACAN,QAAAA,OAAO,CAACS,IAAR,CAAaH,GAAb;AACAP,QAAAA,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACK,GAAD,CAA5B;AACD;AACF;AACF,GAXM,MAWA,IAAI,CAAAT,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,cAAf,MAAkC,KAAtC,EAA6C;AAClD,SAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYV,mBAAZ,CAAlB,EAAoD;AAClD,UAAIQ,GAAG,KAAK,6BAAR,IAAyCA,GAAG,KAAK,cAArD,EAAqE;AACnEN,QAAAA,OAAO,CAACS,IAAR,CAAaH,GAAb;AACAP,QAAAA,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACK,GAAD,CAA5B;AACD;AACF;AACF,GAPM,MAOA,IAAI,CAAAT,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,cAAf,MAAkC,IAAtC,EAA4C;AACjD,SAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYV,mBAAZ,CAAlB,EAAoD;AAClD,UAAIQ,GAAG,KAAK,6BAAZ,EAA2C;AACzCN,QAAAA,OAAO,CAACS,IAAR,CAAaH,GAAb;AACAP,QAAAA,eAAe,CAACU,IAAhB,CAAqBR,OAAO,CAACK,GAAD,CAA5B;AACD;AACF;AACF;;AACD,SAAO;AAAEN,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAP;AACD,CApDM;KAAMH,Y","sourcesContent":["import Rules from \"./Rules\";\nexport const DisplayRules = (passwordRules, PasswordPolicyState) => {\n  const displayablerule = [];\n  const getKeys = [];\n  const ruleMap =\n    passwordRules &&\n    Rules({\n      count: passwordRules?.password_complexity_options?.min_length,\n    });\n  if (passwordRules?.passwordPolicy === \"excellent\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      getKeys.push(key);\n      displayablerule.push(ruleMap[key]);\n    }\n  } else if (passwordRules?.passwordPolicy === \"good\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (\n        key === \"Non_empty_Password_Required\" ||\n        key === \"Lower_case_Upper_Case_Numbers\" ||\n        key === \"Length_Check\" ||\n        key === \"Special_characters\"\n      ) {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if (passwordRules?.passwordPolicy === \"fair\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (\n        key === \"Non_empty_Password_Required\" ||\n        key === \"Lower_case_Upper_Case_Numbers\" ||\n        key === \"Length_Check\"\n      ) {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if (passwordRules?.passwordPolicy === \"low\") {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\" || key === \"Length_Check\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  } else if (passwordRules?.passwordPolicy === null) {\n    for (const key of Object.keys(PasswordPolicyState)) {\n      if (key === \"Non_empty_Password_Required\") {\n        getKeys.push(key);\n        displayablerule.push(ruleMap[key]);\n      }\n    }\n  }\n  return { getKeys, displayablerule };\n};\n"]},"metadata":{},"sourceType":"module"}