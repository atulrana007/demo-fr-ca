{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { AccountContext } from \"../providers/AccountContext\";\nimport { CommonDataContext } from \"../providers/CommonDataContext\";\nimport { validatePassword } from \"../validator/PasswordValidator\";\nexport default function SignupContainer(props) {\n  _s();\n\n  const {\n    SignupWithPassword,\n    loginWithPassword\n  } = useContext(AccountContext);\n  const {\n    connections\n  } = useContext(CommonDataContext);\n  const [isValid, setIsValid] = useState(false);\n  const [passwordRules, setPasswordRules] = useState(null);\n  const [SignupForm, setSignupForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [PasswordPolicyState, setPasswordPolicyState] = useState({\n    No_more_than_2_identical_characters_in_a_row: false,\n    Special_characters: false,\n    Lower_case_Upper_Case_Numbers: false,\n    Length_Check: false,\n    Non_empty_Password_Required: false\n  });\n  const [SignupError, setSignupError] = useState({\n    email: \"\",\n    isEmailError: \"\",\n    databaseError: \"\",\n    errorCode: \"\"\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (SignupForm.email !== \"\" && SignupForm.password !== \"\" && SignupForm.confirmPassword !== \"\" && SignupForm.password === SignupForm.confirmPassword) {\n      try {\n        const res = await SignupWithPassword(SignupForm.email, SignupForm.password);\n\n        if (res.email) {\n          await loginWithPassword(SignupForm.email, SignupForm.password);\n        }\n      } catch (e) {\n        setSignupError({ ...SignupError,\n          databaseError: e.description,\n          errorCode: e.code\n        });\n      }\n    } else {\n      console.log(\"enter details\");\n    }\n  };\n\n  const onClick = e => {\n    setPasswordRules(connections[0]);\n  };\n\n  const onChange = e => {\n    if (e.target.name === \"password\" && passwordRules) {\n      validatePassword(passwordRules, e.target.value, PasswordPolicyState, setPasswordPolicyState, setIsValid);\n    }\n\n    setSignupForm({ ...SignupForm,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const child = React.Children.only(props.children);\n  return /*#__PURE__*/React.cloneElement(child, {\n    onSubmit,\n    SignupForm,\n    onChange,\n    onClick,\n    passwordRules,\n    PasswordPolicyState,\n    isValid,\n    SignupError\n  });\n}\n\n_s(SignupContainer, \"QPjU8C1HAteW3EPpI8oiYZIb7zQ=\");\n\n_c = SignupContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupContainer\");","map":{"version":3,"sources":["/home/raramuri/Videos/McAfee-auth-Official/McAfee-odrplat-auth0-ui/src/containers/signupContainer.jsx"],"names":["React","useContext","useState","AccountContext","CommonDataContext","validatePassword","SignupContainer","props","SignupWithPassword","loginWithPassword","connections","isValid","setIsValid","passwordRules","setPasswordRules","SignupForm","setSignupForm","email","password","confirmPassword","PasswordPolicyState","setPasswordPolicyState","No_more_than_2_identical_characters_in_a_row","Special_characters","Lower_case_Upper_Case_Numbers","Length_Check","Non_empty_Password_Required","SignupError","setSignupError","isEmailError","databaseError","errorCode","onSubmit","e","preventDefault","res","description","code","console","log","onClick","onChange","target","name","value","child","Children","only","children","cloneElement"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { AccountContext } from \"../providers/AccountContext\";\nimport { CommonDataContext } from \"../providers/CommonDataContext\";\nimport { validatePassword } from \"../validator/PasswordValidator\";\n\nexport default function SignupContainer(props) {\n    const { SignupWithPassword, loginWithPassword } =\n        useContext(AccountContext);\n    const { connections } = useContext(CommonDataContext);\n\n    const [isValid, setIsValid] = useState(false);\n    const [passwordRules, setPasswordRules] = useState(null);\n    const [SignupForm, setSignupForm] = useState({\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n    });\n    const [PasswordPolicyState, setPasswordPolicyState] = useState({\n        No_more_than_2_identical_characters_in_a_row: false,\n        Special_characters: false,\n        Lower_case_Upper_Case_Numbers: false,\n        Length_Check: false,\n        Non_empty_Password_Required: false,\n    });\n    const [SignupError, setSignupError] = useState({\n        email: \"\",\n        isEmailError: \"\",\n        databaseError: \"\",\n        errorCode: \"\",\n    });\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if (\n            SignupForm.email !== \"\" &&\n            SignupForm.password !== \"\" &&\n            SignupForm.confirmPassword !== \"\" &&\n            SignupForm.password === SignupForm.confirmPassword\n        ) {\n            try {\n                const res = await SignupWithPassword(\n                    SignupForm.email,\n                    SignupForm.password\n                );\n                if (res.email) {\n                    await loginWithPassword(\n                        SignupForm.email,\n                        SignupForm.password\n                    );\n                }\n            } catch (e) {\n                setSignupError({\n                    ...SignupError,\n                    databaseError: e.description,\n                    errorCode: e.code,\n                });\n            }\n        } else {\n            console.log(\"enter details\");\n        }\n    };\n\n    const onClick = (e) => {\n        setPasswordRules(connections[0]);\n    };\n    const onChange = (e) => {\n        if (e.target.name === \"password\" && passwordRules) {\n            validatePassword(\n                passwordRules,\n                e.target.value,\n                PasswordPolicyState,\n                setPasswordPolicyState,\n                setIsValid\n            );\n        }\n        setSignupForm({\n            ...SignupForm,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const child = React.Children.only(props.children);\n    return React.cloneElement(child, {\n        onSubmit,\n        SignupForm,\n        onChange,\n        onClick,\n        passwordRules,\n        PasswordPolicyState,\n        isValid,\n        SignupError,\n    });\n}\n"]},"metadata":{},"sourceType":"module"}